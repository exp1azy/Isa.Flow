<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActorAlreadyStartedError" xml:space="preserve">
    <value>An actor with the same ID is already started</value>
  </data>
  <data name="ActorIdCannotBeNullEmptyOrBlank" xml:space="preserve">
    <value>Actor ID cannot be null, empty or blank string</value>
  </data>
  <data name="ActorInfoRequired" xml:space="preserve">
    <value>Actor info is required</value>
  </data>
  <data name="ActorTypeCannotBeNullEmptyOrBlank" xml:space="preserve">
    <value>Actor type cannot be null, empty or blank string</value>
  </data>
  <data name="ConcurrentCustomersOutOfRange" xml:space="preserve">
    <value>The number of concurrent customers is less than 1 or greater than 10</value>
  </data>
  <data name="ConnectionAborted" xml:space="preserve">
    <value>Connection aborted</value>
  </data>
  <data name="ConnectionClosed" xml:space="preserve">
    <value>Connection сlosed</value>
  </data>
  <data name="FromToError" xml:space="preserve">
    <value>The range of identifiers is incorrect</value>
  </data>
  <data name="InvalidRpcRequest" xml:space="preserve">
    <value>Invalid RPC request object</value>
  </data>
  <data name="LastArticleIdCannotBeNegative" xml:space="preserve">
    <value>LastArticleId cannot be negative</value>
  </data>
  <data name="MessageNackError" xml:space="preserve">
    <value>Message nack error. Message rejected</value>
  </data>
  <data name="MessageRoutingError" xml:space="preserve">
    <value>Message routing error. The most likely reason is the lack of a receiving queue</value>
  </data>
  <data name="NullPayload" xml:space="preserve">
    <value>Payload object is null</value>
  </data>
  <data name="NumberCannotBeNullEmptyOrBlank" xml:space="preserve">
    <value>Number can not be null, empty or blank</value>
  </data>
  <data name="OtherActorWithTheSameIdLaunching" xml:space="preserve">
    <value>Other actor with the same ID is launching</value>
  </data>
  <data name="PayloadTypeMismatch" xml:space="preserve">
    <value>The payload type in the message does not match the declared one</value>
  </data>
  <data name="QueueNameCannotBeNullEmptyOrBlank" xml:space="preserve">
    <value>Queue name can not be null, empty or blank</value>
  </data>
  <data name="QueueNameError" xml:space="preserve">
    <value>Cannot use such a queue name, because it is reserved for internal needs</value>
  </data>
  <data name="RpcHandlingError" xml:space="preserve">
    <value>Rpc handling error</value>
  </data>
  <data name="SendingError" xml:space="preserve">
    <value>Error occured while message sending</value>
  </data>
  <data name="SerializingError" xml:space="preserve">
    <value>Serializing error</value>
  </data>
  <data name="SubscriptionError" xml:space="preserve">
    <value>Error occured while message subscription</value>
  </data>
  <data name="UnknownSqlExtractionFunc" xml:space="preserve">
    <value>The specified function does not meet the requirements: New, Updated or Deleted</value>
  </data>
  <data name="UnknownSqlExtractionIntervalFunc" xml:space="preserve">
    <value>The specified function does not meet the requirements: Reindex or Clean</value>
  </data>
  <data name="UnknownValidationError" xml:space="preserve">
    <value>Unknown validation error</value>
  </data>
  <data name="VerificationCodeCannotBeNullEmptyOrBlank" xml:space="preserve">
    <value>Verification code can not be null, empty or blank</value>
  </data>
</root>